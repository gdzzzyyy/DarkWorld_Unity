// Upgrade NOTE: replaced '_Object2World' with 'unity_ObjectToWorld'

// Upgrade NOTE: replaced '_Object2World' with 'unity_ObjectToWorld'
// Upgrade NOTE: replaced 'mul(UNITY_MATRIX_MVP,*)' with 'UnityObjectToClipPos(*)'

// Character shader
// Includes falloff shadow and highlight, specular, reflection, and normal mapping

#define ENABLE_CAST_SHADOWS

// Material parameters
float4 _Color;
float4 _ShadowColor;
float4 _HighColor;
float4 _LightColor0;
float _SpecularPower;
float4 _MainTex_ST;
float _HighLight;
float _HighLightPower;
float4 _HighLightColor;
float _OutlineDepth;
float4 _RampColor;
float _LightShadeAlpha;
float _HighLightFixFactor;
float4 _ColorOverride;
float _AmbientPower;
float4 _Diffuse;
float _Gloss;

// Textures
sampler2D _MainTex;
sampler2D _FalloffSampler;
sampler2D _RimLightSampler;
sampler2D _SpecularReflectionSampler;
sampler2D _EnvMapSampler;
sampler2D _NormalMapSampler;
sampler2D _HighLightSampler;
sampler2D _Ramp;

// Constants
#define FALLOFF_POWER 0.3

#ifdef ENABLE_CAST_SHADOWS

// Structure from vertex shader to fragment shader
struct v2f
{
	float4 pos      : SV_POSITION;
	LIGHTING_COORDS( 0, 1 )
	float2 uv : TEXCOORD2;
	float3 eyeDir : TEXCOORD3;
	float3 normal   : TEXCOORD4;
	float3 tangent  : TEXCOORD5;
	float3 binormal : TEXCOORD6;
	float3 lightDir : TEXCOORD7;
	float3 worldPos : TEXCOORD8;
	float4 TtoW0 : TEXCOORD9;  
        float4 TtoW1 : TEXCOORD10;  
        float4 TtoW2 : TEXCOORD11; 
	//UNITY_SHADOW_COORDS(12)
};

#else

// Structure from vertex shader to fragment shader
struct v2f
{
	float4 pos      : SV_POSITION;
	float2 uv       : TEXCOORD0;
	float3 eyeDir   : TEXCOORD1;
	float3 normal   : TEXCOORD2;
	float3 tangent  : TEXCOORD3;
	float3 binormal : TEXCOORD4;
	float3 lightDir : TEXCOORD5;
	float3 worldPos : TEXCOORD6;
	float4 TtoW0 : TEXCOORD7;  
        float4 TtoW1 : TEXCOORD8;  
        float4 TtoW2 : TEXCOORD9; 
	//UNITY_SHADOW_COORDS(10)
};

#endif

// Float types
#define float_t  half
#define float2_t half2
#define float3_t half3
#define float4_t half4

// Vertex shader
v2f vert( appdata_tan v )
{
	v2f o;
	o.pos = UnityObjectToClipPos( v.vertex );
	o.uv.xy = TRANSFORM_TEX( v.texcoord.xy, _MainTex );
	o.normal = normalize( mul( unity_ObjectToWorld, float4_t( v.normal, 0 ) ).xyz );
	
	half4 worldPos = mul( unity_ObjectToWorld, v.vertex );
	o.worldPos = worldPos;
	o.eyeDir.xyz = normalize( _WorldSpaceCameraPos.xyz - worldPos.xyz ).xyz;
	
	o.tangent = v.tangent.xyz;
	o.binormal = cross( v.normal, v.tangent.xyz ) * v.tangent.w;
	o.lightDir = WorldSpaceLightDir( v.vertex );

#ifdef ENABLE_CAST_SHADOWS
	TRANSFER_VERTEX_TO_FRAGMENT( o );
#endif
	return o;
}

v2f vert_point(appdata_tan v)
{
	
	v2f o;
	o.pos = UnityObjectToClipPos( v.vertex );
	o.uv.xy = TRANSFORM_TEX( v.texcoord.xy, _MainTex );
	o.normal = normalize( mul( unity_ObjectToWorld, float4_t( v.normal, 0 ) ).xyz );
	
	// Eye direction vector
	half4 worldPos = mul( unity_ObjectToWorld, v.vertex );
	o.worldPos = worldPos;
	o.eyeDir.xyz = normalize( _WorldSpaceCameraPos.xyz - worldPos.xyz ).xyz;
	
	// Binormal and tangent (for normal map)
	o.tangent = v.tangent.xyz;
	o.binormal = cross( v.normal, v.tangent.xyz ) * v.tangent.w;
	o.lightDir = WorldSpaceLightDir( v.vertex );

	TANGENT_SPACE_ROTATION;
    fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);  
    fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);  
    fixed3 worldBinormal = cross(worldNormal, worldTangent) * v.tangent.w; 
                
    o.TtoW0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);  
    o.TtoW1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);  
    o.TtoW2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z); 

#ifdef ENABLE_CAST_SHADOWS
	TRANSFER_VERTEX_TO_FRAGMENT( o );
#endif
	UNITY_TRANSFER_SHADOW(o, v.uv);
	return o;
}

// Overlay blend
inline float3_t GetOverlayColor( float3_t inUpper, float3_t inLower )
{
	float3_t oneMinusLower = float3_t( 1.0, 1.0, 1.0 ) - inLower;
	float3_t valUnit = 2.0 * oneMinusLower;
	float3_t minValue = 2.0 * inLower - float3_t( 1.0, 1.0, 1.0 );
	float3_t greaterResult = inUpper * valUnit + minValue;

	float3_t lowerResult = 2.0 * inLower * inUpper;

	half3 lerpVals = round(inLower);
	return lerp(lowerResult, greaterResult, lerpVals);
}

// Compute normal from normal map
inline float3_t GetNormalFromMap( v2f input )
{
	float3_t normalVec = normalize( tex2D( _NormalMapSampler, input.uv ).xyz * 2.0 - 1.0 );
	normalVec = input.tangent * normalVec.x + input.binormal * normalVec.y + input.normal * normalVec.z;
	return normalVec;
}


float4 frag_point(v2f i) : COLOR
{
	float4_t diffSamplerColor = tex2D( _MainTex, i.uv.xy );

	float3_t normalVec = i.normal;// GetNormalFromMap( i );
	
	float_t normalDotEye = dot( normalVec, i.eyeDir.xyz );
	float4_t shadingRampSamplerColor = tex2D(_Ramp, i.uv.xy);
	fixed3 worldLightDir = normalize(_WorldSpaceLightPos0.xyz - i.worldPos.xyz);
	float NdotL = dot(normalVec, worldLightDir);
	float diff = NdotL * 0.5 + 0.5;
	#if defined (POINT)
			float3 worldPos = float3(i.TtoW0.w, i.TtoW1.w, i.TtoW2.w);
			UNITY_LIGHT_ATTENUATION(atten, 0, worldPos);
			diff = atten;
		#elif defined (SPOT)
			float4 lightCoord = mul(unity_WorldToLight, float4(i.worldPos, 1));
			fixed atten = (lightCoord.z > 0) * tex2D(_LightTexture0, lightCoord.xy / lightCoord.w + 0.5).w * tex2D(_LightTextureB0, dot(lightCoord, lightCoord).rr).UNITY_ATTEN_CHANNEL;
			diff = atten;
		#else
			fixed atten = 1.0;
	#endif

	float3_t ramp = tex2D(_FalloffSampler, float2(diff, diff)).rgb;
	float3_t shadeRamp = lerp(shadingRampSamplerColor, _HighColor, ramp);
	ramp = lerp(clamp(_ShadowColor, 0.1, 1.0f), _HighColor, ramp);

	float3 combineRamp = lerp(ramp, shadeRamp, _LightShadeAlpha) ;
	float3 L = normalize(_WorldSpaceLightPos0).xyz;
	float ndotl = saturate(dot(normalVec, L));
	float3_t combinedColor = (diffSamplerColor * _LightColor0.rgb * diff ) + UNITY_LIGHTMODEL_AMBIENT.rgb * _AmbientPower;
	combinedColor *= (1 + ndotl*2) ;
	float opacity = diffSamplerColor.a * _Color.a * _LightColor0.a;
	combinedColor += lerp(diffSamplerColor, combinedColor, 1-ramp) ;
	return float4( combinedColor  , opacity );
}

// Fragment shader
float4 frag( v2f i ) : COLOR
{
	float4_t diffSamplerColor = tex2D( _MainTex, i.uv.xy );

	float3_t normalVec = i.normal;// GetNormalFromMap( i );
	
	float_t normalDotEye = dot( normalVec, i.eyeDir.xyz );
	float4_t shadingRampSamplerColor = tex2D(_Ramp, i.uv.xy);

	float NdotL = dot(normalVec, i.lightDir);
	float diff = NdotL * 0.5 + 0.5;
	float3_t ramp = tex2D(_FalloffSampler, float2(diff, diff)).rgb;
	float3_t shadeRamp = lerp(shadingRampSamplerColor, _HighColor, ramp);
	ramp = lerp(clamp(_ShadowColor, 0.1, 1.0f), _HighColor, ramp);

	float3 combineRamp = lerp(ramp, shadeRamp, _LightShadeAlpha) ;
	float3_t combinedColor = (diffSamplerColor * _LightColor0.rgb * combineRamp ) + UNITY_LIGHTMODEL_AMBIENT.rgb * _AmbientPower;
	combinedColor += lerp(diffSamplerColor, combinedColor, 1-ramp);

	// Rimlight ±ßÔµ¸ß¹â
	float opacity = diffSamplerColor.a * _Color.a * _LightColor0.a;
	float_t hightLight = abs(_HighLight);
	float_t lightPower = step(hightLight, NdotL);//*NdotL;
	float_t eyePower = (1 - step(hightLight, abs(normalDotEye)));//*normalDotEye;
	float4_t highLightSamplerColor = tex2D(_HighLightSampler, i.uv.xy);
	float3_t fixColor = lerp(_HighLightColor.rgb, highLightSamplerColor.rgb, _HighLightFixFactor);
	combinedColor += _HighLightPower*lightPower*eyePower*fixColor;

	return float4( combinedColor, opacity );
}